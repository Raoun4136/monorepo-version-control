name: Vercel Development Deployment

on:
  push:
    branches:
      - develop

jobs:
  # 그 전 배포에서 변경된 파일을 확인하는 작업
  check-diff:
    runs-on: ubuntu-latest
    outputs:
      CHANGED_FILES: ${{ steps.check_diff.outputs.CHANGED_FILES }}
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0 # fetch all history
      - name: Check Diff
        id: check_diff
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ',')
          CHANGED_FILES=${CHANGED_FILES%,} # 마지막 쉼표 제거
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "CHANGED_FILES=$CHANGED_FILES"

  deploy-apps:
    # 'deploy-apps' 라벨이 존재하면 앱을 배포합니다.
    runs-on: ubuntu-latest
    needs: check-diff
    if: contains(needs.check-diff.outputs.CHANGED_FILES, 'packages/apps/')
    environment: Development – monorepo-version-control-apps
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Load Environment Variables from JSON
        run: |
          BUILD_ENV=$(cat env.apps.json | jq -r 'to_entries|map("\(.key)=\"\(.value)\"")|.[]'
          echo "BUILD_ENV=${BUILD_ENV}" >> $GITHUB_ENV
      - name: Deploy Apps
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_APPS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION: false
          GITHUB_DEPLOYMENT: false
          ALIAS_DOMAINS: dev-monorepo-version-control-apps.vercel.app
          BUILD_ENV: ${{ env.BUILD_ENV }}

  deploy-apps-jp:
    # 'deploy-apps-jp' 라벨이 존재하면 앱-jp를 배포합니다.
    runs-on: ubuntu-latest
    needs: check-diff
    if: contains(needs.check-diff.outputs.CHANGED_FILES, 'packages/apps/')
    environment: Development – monorepo-version-control-apps-jp
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Load Environment Variables from JSON
        run: |
          BUILD_ENV=$(cat env.apps.json | jq -r 'to_entries|map("\(.key)=\"\(.value)\"")|.[]'
          echo "BUILD_ENV=${BUILD_ENV}" >> $GITHUB_ENV
      - name: Deploy Apps-jp
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_APPS_JP }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION: false
          GITHUB_DEPLOYMENT: false
          ALIAS_DOMAINS: dev-monorepo-version-control-apps-jp.vercel.app
          BUILD_ENV: ${{ env.BUILD_ENV }}

  deploy-landing:
    # 'deploy-landing' 라벨이 존재하면 랜딩을 배포합니다.
    runs-on: ubuntu-latest
    needs: check-diff
    if: contains(needs.check-diff.outputs.CHANGED_FILES, 'packages/landing/')
    environment: Development – monorepo-version-control-landing
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Load Environment Variables from JSON
        run: |
          BUILD_ENV=$(cat env.landing.json | jq -r 'to_entries|map("\(.key)=\"\(.value)\"")|.[]'
          echo "BUILD_ENV<<EOF" >> $GITHUB_ENV
          echo "${BUILD_ENV}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Deploy Landing
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LANDING }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION: false
          GITHUB_DEPLOYMENT: false
          ALIAS_DOMAINS: dev-monorepo-version-control-landing.vercel.app
          BUILD_ENV: ${{ env.BUILD_ENV }}

  deploy-landing-jp:
    # 'deploy-landing-jp' 라벨이 존재하면 랜딩-jp를 배포합니다.
    runs-on: ubuntu-latest
    needs: check-diff
    if: contains(needs.check-diff.outputs.CHANGED_FILES, 'packages/landing-jp/')
    environment: Development – monorepo-version-control-landing-jp
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Load Environment Variables from JSON
        run: |
          BUILD_ENV=$(cat env.landing.json | jq -r 'to_entries|map("\(.key)=\"\(.value)\"")|.[]'
          echo "BUILD_ENV=${BUILD_ENV}" >> $GITHUB_ENV
      - name: Deploy Landing-jp
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LANDING_JP }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION: false
          GITHUB_DEPLOYMENT: false
          ALIAS_DOMAINS: dev-monorepo-version-control-landing-jp.vercel.app
          BUILD_ENV: ${{ env.BUILD_ENV }}
