name: Vercel Development Deployment

on:
  push:
    branches:
      - develop

jobs:
  check-pr-labels:
    runs-on: ubuntu-latest
    outputs:
      PR_LABELS: ${{ steps.get_labels.outputs.PR_LABELS }}
    steps:
      # Checkout the repository
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      # 최근 PR이 Merge 된 라벨을 가져온다.
      - name: Extract PR labels for latest merged PR
        id: get_labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the most recent PR merged into the branch
          PR_LABELS=$(gh pr list --base develop --state merged --limit 1 --json labels --jq ".[].labels[].name" | tr '\n' ',' | sed 's/,$//')
          echo "PR_LABELS=$PR_LABELS" >> $GITHUB_OUTPUT
          echo "PR_LABELS=$PR_LABELS"

  deploy-apps:
    # 'deploy-apps' 라벨이 존재하면 앱을 배포합니다.
    runs-on: ubuntu-latest
    needs: check-pr-labels
    if: contains(needs.check-pr-labels.outputs.PR_LABELS, 'deploy-apps')
    environment: Development – monorepo-version-control-apps
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Deploy Apps
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_APPS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION: false
          GITHUB_DEPLOYMENT: false
          ALIAS_DOMAINS: dev-monorepo-version-control-apps.vercel.app
          BUILD_ENV: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_API_KEY=${{ secrets.NEXT_PUBLIC_API_KEY }}
            NEXT_PUBLIC_NODE_ENV=${{ secrets.NEXT_PUBLIC_NODE_ENV }}

  deploy-jp-apps:
    # 'deploy-jp-apps' 라벨이 존재하면 앱-jp를 배포합니다.
    runs-on: ubuntu-latest
    needs: check-pr-labels
    if: contains(needs.check-pr-labels.outputs.PR_LABELS, 'deploy-jp-apps')
    environment: Development – monorepo-version-control-apps-jp
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Deploy Apps-jp
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_APPS_JP }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION: false
          GITHUB_DEPLOYMENT: false
          ALIAS_DOMAINS: dev-monorepo-version-control-apps-jp.vercel.app
          BUILD_ENV: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_API_KEY=${{ secrets.NEXT_PUBLIC_API_KEY }}
            NEXT_PUBLIC_NODE_ENV=${{ secrets.NEXT_PUBLIC_NODE_ENV }}

  deploy-landing:
    # 'deploy-landing' 라벨이 존재하면 랜딩을 배포합니다.
    runs-on: ubuntu-latest
    needs: check-pr-labels
    if: contains(needs.check-pr-labels.outputs.PR_LABELS, 'deploy-landing')
    environment: Development – monorepo-version-control-landing
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Deploy Landing
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LANDING }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION: false
          GITHUB_DEPLOYMENT: false
          ALIAS_DOMAINS: dev-monorepo-version-control-landing.vercel.app
          BUILD_ENV: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_API_KEY=${{ secrets.NEXT_PUBLIC_API_KEY }}
            NEXT_PUBLIC_NODE_ENV=${{ secrets.NEXT_PUBLIC_NODE_ENV }}

  deploy-jp-landing:
    # 'deploy-jp-landing' 라벨이 존재하면 랜딩-jp를 배포합니다.
    runs-on: ubuntu-latest
    needs: check-pr-labels
    if: contains(needs.check-pr-labels.outputs.PR_LABELS, 'deploy-jp-landing')
    environment: Development – monorepo-version-control-landing-jp
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Deploy Landing-jp
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LANDING_JP }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION: false
          GITHUB_DEPLOYMENT: false
          ALIAS_DOMAINS: dev-monorepo-version-control-landing-jp.vercel.app
          BUILD_ENV: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_API_KEY=${{ secrets.NEXT_PUBLIC_API_KEY }}
            NEXT_PUBLIC_NODE_ENV=${{ secrets.NEXT_PUBLIC_NODE_ENV }}
